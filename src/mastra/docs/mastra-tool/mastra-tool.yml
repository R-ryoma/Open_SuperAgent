# Mastra 3-段階ストリーミング UI/API 利用ガイド
# ─────────────────────────────────────────────
#   ① 文章を流し込む
#   ② ツール呼び出し中表示
#   ③ ツール結果に差し替え
# ─────────────────────────────────────────────

################################################################################
# 1. フロントエンド
################################################################################
frontend:
  package: "@mastra/playground-ui"
  install:
    - pnpm add @mastra/playground-ui               # UI コンポーネント群
    - pnpm add @assistant-ui/react                 # UI プリミティブ
    - pnpm add @mastra/client-js                   # Mastra API SDK
  entry_files:
    thread: components/assistant-ui/thread.tsx          # チャット欄の親
    assistantMessage: components/assistant-ui/assistant-message.tsx
    userMessage: components/assistant-ui/user-message.tsx
    toolFallback: components/assistant-ui/tool-fallback.tsx
    runtimeProvider: services/mastra-runtime-provider.tsx
  optional_files:
    markdownText: components/assistant-ui/markdown-text.tsx
    tooltipIconButton: components/assistant-ui/tooltip-icon-button.tsx
    useAutoscroll: hooks/use-autoscroll.ts
  init_flow:
    - step: "① MastraRuntimeProvider をアプリのツリーに配置"
      code: |
        <MastraRuntimeProvider agentId="weather-bot" baseUrl="http://api:3030">
          <Thread />           <!-- chat UI -->
        </MastraRuntimeProvider>
    - step: "② Thread コンポーネントが内部で AssistantRuntimeProvider へ接続"
    - step: "③ ユーザー入力時 onNew() が SDK へストリーム要求を送出"
  event_flow:
    onTextPart:
      description: "AI 文章のチャンクを受信。assistantMessage.content の text を追記。"
    onToolCallPart:
      description: "ツール呼び出し検知。tool-call Part を content 配列に push。toolFallback が『実行中』表示。"
    onToolResultPart:
      description: "ツール結果を受信。対応する tool-call Part に result をマージし UI を置換。"

################################################################################
# 2. バックエンド
################################################################################
backend:
  server_repo_paths:
    handler_agents: packages/server/src/server/handlers/agents.ts
    handler_network: packages/server/src/server/handlers/network.ts
    agent_core: packages/core/src/agent/index.ts     # stream() 実装
  build_requirements:
    - pnpm add @mastra/core @mastra/server           # 主要ライブラリ
    - 任意: express / hono など HTTP ランタイム（server パッケージ同梱）
  http_endpoints:
    stream_agent:
      method: POST
      url: "/agents/{agentId}/stream"
      body:
        messages: "User + system messages"
        runId: "任意の uuid"
      success_response: "Content-Type: text/event-stream (data-stream format)"
  data_stream_format:
    - event: text
      json: { "type": "text", "text": "<chunk>" }
    - event: tool-call
      json: { "type": "tool-call", "toolCallId": "<id>", "toolName": "...", "args": { ... } }
    - event: tool-result
      json: { "type": "tool-result", "toolCallId": "<id>", "result": { ... } }
  server_flow:
    - receive: "POST /agents/:id/stream"
    - call: "mastra.getAgent(id).stream(messages, opts)"
    - pipe: "streamResult.toDataStreamResponse() → HTTP Response"
  add_custom_tool:
    - "Agent 側で tools に { myTool: {...} } を定義"
    - "tool.execute = async (args) => { ... return result }"
    - "実行結果は自動的に tool-result としてストリームされる"

################################################################################
# 3. 画面に現れる３段階のタイミング
################################################################################
ui_timeline:
  - T0_send:
      user: "入力を送信"
      ui: "ユーザーメッセージ吹き出し追加"
      backend: "stream 生成開始"
  - T1_stream_text:
      backend: "text チャンク → onTextPart"
      ui: "assistantMessage に文字列追記（タイプライタ表示）"
  - T2_tool_call:
      backend: "tool-call イベント → onToolCallPart"
      ui: "toolFallback が『実行中…』バッジを表示"
  - T3_tool_result:
      backend: "tool-result イベント → onToolResultPart"
      ui: "同じ吹き出し内でバッジを結果カードに置換"

################################################################################
# 4. カスタマイズポイント
################################################################################
customize:
  tool_ui:
    - "Thread へ <Thread ToolFallback={MyToolCard} /> と渡す"
    - "MyToolCard(props) 内で props.result が undefined → ローディング, あり → 結果表示"
  theming:
    - "Tailwind の className を tool-fallback.tsx, thread.tsx で編集"
  state_management:
    - "ストアを拡張する場合は store/playground-store.ts を利用"